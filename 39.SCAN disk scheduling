#include <stdio.h>
#include <stdlib.h>

// Function to simulate SCAN disk scheduling
void scan(int head, int requests[], int num_requests, int max_cylinder) {
    int total_movement = 0;
    int direction; // Direction of movement: 1 for right, -1 for left

    // Determine initial direction based on the first request
    if (head < requests[0]) {
        direction = 1; // Move right
    } else {
        direction = -1; // Move left
    }

    // Sort the requests based on cylinder number
    for (int i = 0; i < num_requests - 1; i++) {
        for (int j = 0; j < num_requests - i - 1; j++) {
            if (requests[j] > requests[j + 1]) {
                int temp = requests[j];
                requests[j] = requests[j + 1];
                requests[j + 1] = temp;
            }
        }
    }

    // Service requests while moving in the current direction
    int current_position = head;
    int index = 0; // Index of the next request to be serviced
    while (1) {
        printf("Servicing request at cylinder %d\n", current_position);
        total_movement += abs(current_position - requests[index]);
        current_position = requests[index];

        // Move to the next request
        if (direction == 1) {
            index++;
            // Check if reached the last request or end of the disk
            if (index == num_requests || current_position == max_cylinder) {
                break;
            }
        } else {
            index--;
            // Check if reached the first request or start of the disk
            if (index == -1 || current_position == 0) {
                break;
            }
        }
    }

    // Change direction and continue servicing requests
    direction *= -1; // Reverse direction
    while (1) {
        printf("Servicing request at cylinder %d\n", current_position);
        total_movement += abs(current_position - requests[index]);
        current_position = requests[index];

        // Move to the next request
        if (direction == 1) {
            index++;
            // Check if reached the last request or end of the disk
            if (index == num_requests || current_position == max_cylinder) {
                break;
            }
        } else {
            index--;
            // Check if reached the first request or start of the disk
            if (index == -1 || current_position == 0) {
                break;
            }
        }
    }

    printf("Total head movement: %d\n", total_movement);
}

int main() {
    int head; // Initial position of disk head
    int num_requests; // Number of disk access requests
    int max_cylinder; // Maximum cylinder number
    int requests[100]; // Array to store disk access requests

    // Input initial head position
    printf("Enter the initial position of the disk head: ");
    scanf("%d", &head);

    // Input maximum cylinder number
    printf("Enter the maximum cylinder number: ");
    scanf("%d", &max_cylinder);

    // Input number of requests
    printf("Enter the number of disk access requests: ");
    scanf("%d", &num_requests);

    // Input disk access requests
    printf("Enter the disk access requests:\n");
    for (int i = 0; i < num_requests; i++) {
        printf("Request %d: ", i + 1);
        scanf("%d", &requests[i]);
    }

    // Simulate SCAN disk scheduling
    printf("\nSimulating SCAN disk scheduling:\n");
    scan(head, requests, num_requests, max_cylinder);

    return 0;
}
