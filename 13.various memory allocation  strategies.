#include <stdio.h>
#include <stdlib.h>

#define MEMORY_SIZE 1000

// Structure to represent a memory block
typedef struct {
    int id;         // Process ID
    int size;       // Size of memory block
    int allocated;  // Flag to indicate whether the block is allocated or not (1: allocated, 0: free)
} MemoryBlock;

MemoryBlock memory[MEMORY_SIZE];

// Initialize memory
void initializeMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i].id = -1;      // -1 indicates the block is free
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// First Fit allocation
void firstFit(int pid, int size) {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= size) {
            memory[i].id = pid;
            memory[i].allocated = 1;
            printf("Process %d allocated %d bytes at position %d\n", pid, size, i);
            return;
        }
    }
    printf("Process %d could not be allocated %d bytes (First Fit)\n", pid, size);
}

// Best Fit allocation
void bestFit(int pid, int size) {
    int bestFitIndex = -1;
    int minSize = MEMORY_SIZE + 1;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= size && memory[i].size < minSize) {
            minSize = memory[i].size;
            bestFitIndex = i;
        }
    }
    if (bestFitIndex != -1) {
        memory[bestFitIndex].id = pid;
        memory[bestFitIndex].allocated = 1;
        printf("Process %d allocated %d bytes at position %d\n", pid, size, bestFitIndex);
    } else {
        printf("Process %d could not be allocated %d bytes (Best Fit)\n", pid, size);
    }
}

// Worst Fit allocation
void worstFit(int pid, int size) {
    int worstFitIndex = -1;
    int maxSize = -1;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (!memory[i].allocated && memory[i].size >= size && memory[i].size > maxSize) {
            maxSize = memory[i].size;
            worstFitIndex = i;
        }
    }
    if (worstFitIndex != -1) {
        memory[worstFitIndex].id = pid;
        memory[worstFitIndex].allocated = 1;
        printf("Process %d allocated %d bytes at position %d\n", pid, size, worstFitIndex);
    } else {
        printf("Process %d could not be allocated %d bytes (Worst Fit)\n", pid, size);
    }
}

// Deallocate memory block
void deallocate(int pid) {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i].id == pid) {
            memory[i].id = -1;
            memory[i].allocated = 0;
            printf("Memory block allocated to process %d deallocated\n", pid);
            return;
        }
    }
    printf("Process %d not found to deallocate\n", pid);
}

int main() {
    initializeMemory();

    // Simulate memory allocation and deallocation requests
    firstFit(1, 200);
    firstFit(2, 300);
    bestFit(3, 250);
    worstFit(4, 150);
    firstFit(5, 400);
    deallocate(2);
    bestFit(6, 100);

    return 0;
}
