#include <stdio.h>

#define MAX_PROCESS 10
#define TIME_QUANTUM 4

struct Process {
    int id;
    int burst_time;
    int remaining_time;
};

void round_robin(struct Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    int time = 0;
    int remaining_processes = n;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time <= TIME_QUANTUM) {
                    time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    total_waiting_time += time - processes[i].burst_time;
                    total_turnaround_time += time;
                    remaining_processes--;
                } else {
                    time += TIME_QUANTUM;
                    processes[i].remaining_time -= TIME_QUANTUM;
                }
            }
        }
    }

    printf("\nAverage Waiting Time: %.2f", (float) total_waiting_time / n);
    printf("\nAverage Turnaround Time: %.2f", (float) total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESS];

    for (int i = 0; i < n; i++) {
        printf("\nEnter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].id = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    round_robin(processes, n);

    return 0;
}
