#include <stdio.h>
#include <stdbool.h>

#define FRAME_SIZE 3 // Number of frames in memory

int main() {
    int frames[FRAME_SIZE]; // Frames in memory
    int page_faults = 0; // Counter for page faults

    // Initialize frames to -1 (empty)
    for (int i = 0; i < FRAME_SIZE; i++) {
        frames[i] = -1;
    }

    // Array to simulate page references (replace this with your own sequence)
    int page_references[] = {0, 1, 2, 3, 0, 4, 5, 1, 6, 7, 0, 8, 9, 1, 2, 3, 4, 5, 6, 7};

    // Simulate page references
    for (int i = 0; i < sizeof(page_references) / sizeof(page_references[0]); i++) {
        int page = page_references[i];
        bool page_found = false;

        // Check if page is already in memory
        for (int j = 0; j < FRAME_SIZE; j++) {
            if (frames[j] == page) {
                page_found = true;
                break;
            }
        }

        // If page is not found, replace the page with the longest time until next use
        if (!page_found) {
            int farthest_index = 0;
            int farthest_distance = -1;
            for (int j = 0; j < FRAME_SIZE; j++) {
                int next_use = 0;
                for (int k = i + 1; k < sizeof(page_references) / sizeof(page_references[0]); k++) {
                    if (page_references[k] == frames[j]) {
                        next_use = k - i;
                        break;
                    }
                }
                if (next_use > farthest_distance) {
                    farthest_distance = next_use;
                    farthest_index = j;
                }
            }
            frames[farthest_index] = page;
            page_faults++;
        }

        // Print current memory state
        printf("Page Reference: %d\n", page);
        printf("Frames in Memory: ");
        for (int j = 0; j < FRAME_SIZE; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n\n");
    }

    // Print total page faults
    printf("Total Page Faults: %d\n", page_faults);

    return 0;
}
